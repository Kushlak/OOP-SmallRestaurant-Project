@page "/orders/{OrderId:guid}"
@inject IOrderService OrderService
@inject NavigationManager Nav

<h2>Order Details</h2>

@if (!_loaded)
{
  <div class="text-center">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
}
else if (_order == null)
{
  <div class="alert alert-warning">Order not found.</div>
}
else
{
  <dl class="row">
    <dt class="col-sm-2">Order ID</dt>
    <dd class="col-sm-10">@_order.Id</dd>

    <dt class="col-sm-2">Date</dt>
    <dd class="col-sm-10">@_order.CreatedAt.ToString("f")</dd>

    <dt class="col-sm-2">Status</dt>
    <dd class="col-sm-10">@_order.Status</dd>

    <dt class="col-sm-2">Delivery</dt>
    <dd class="col-sm-10">
      @if (_order.Delivery == DeliveryType.Pickup)
      {
        <span>Pickup — collect your order at the restaurant.</span>
      }
      else if (!string.IsNullOrWhiteSpace(_order.Address?.Street))
      {
        <div>
          Courier to: @_order.Address.Street, @_order.Address.City, @_order.Address.PostalCode<br />
          Delivery price: @DeliveryHelper.GetPrice(_order.Delivery).ToString("C")
        </div>
      }
      else
      {
        <span class="text-danger">Delivery address is missing</span>
      }
    </dd>

    <dt class="col-sm-2">Total</dt>
    <dd class="col-sm-10">
      @{
        var deliveryPrice = DeliveryHelper.GetPrice(_order.Delivery);
        var finalTotal = _order.Total + deliveryPrice;
      }
      @($"{finalTotal:C}")
    </dd>
  </dl>

  <h4>Items</h4>
  <table class="table">
    <thead>
    <tr>
      <th>Dish</th>
      <th>Qty</th>
      <th>Price</th>
      <th>Subtotal</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in _order.Items ?? Enumerable.Empty<OrderItem>())
    {
      <tr>
        <td>@item.DishName</td>
        <td>@item.Quantity</td>
        <td>@($"{item.Price:C}")</td>
        <td>@($"{item.Price * item.Quantity:C}")</td>
      </tr>
    }
    </tbody>
  </table>

  <button class="btn btn-secondary" @onclick='() => Nav.NavigateTo("/orders")'>
    Back to list
  </button>
}

@code {
  [Parameter] public Guid OrderId { get; set; }

  private Order? _order;
  private bool _loaded;

  protected override async Task OnInitializedAsync()
  {
    _order = await OrderService.GetByIdAsync(OrderId);
    _loaded = true;
  }
}
