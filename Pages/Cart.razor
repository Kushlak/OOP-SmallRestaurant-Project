@page "/cart"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IOrderService OrderService
@inject IDishService DishService
@inject IAddressService AddressService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<h2>Your Cart</h2>

@if (!_loaded)
{
  <div class="text-center my-5">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
}
else if (!_items.Any())
{
  <div class="alert alert-info">Your cart is empty.</div>
}
else
{
  <div class="list-group mb-4">
    @foreach (var (item, idx) in _items.Select((value, i) => (value, i + 1)))
    {
      <div class="list-group-item d-flex align-items-center">
        <div class="fw-bold me-3">@idx.</div>

        <img src="@GetImageUrl(item.DishId)" alt="@item.DishName"
             class="rounded me-3"
             style="width:60px;height:60px;object-fit:cover"/>

        <div class="flex-grow-1">
          <div class="fw-semibold">@item.DishName</div>
          <div class="text-muted">@item.Price.ToString("C")</div>
        </div>

        <div class="mx-3 d-flex align-items-center">
          <button class="btn btn-sm btn-outline-secondary"
                  @onclick="() => ChangeQuantity(item.DishId, -1)">
            –
          </button>
          <span class="mx-2">@item.Quantity</span>
          <button class="btn btn-sm btn-outline-secondary"
                  @onclick="() => ChangeQuantity(item.DishId, +1)">
            +
          </button>
        </div>

        <div class="mx-3">
          @(item.Price * item.Quantity).ToString("C")
        </div>

        <button class="btn btn-sm btn-danger"
                @onclick="() => RemoveAll(item.DishId)">
          Remove
        </button>
      </div>
    }
  </div>

  <p class="mb-2">
    <strong>Delivery method:</strong>
  </p>

  <div class="form-group">
    <label>Delivery?</label>
    <InputCheckbox @bind-Value="_isDelivery"/>
    Yes
  </div>

  @if (_isDelivery)
  {
    <p>
      <strong>Deliver to:</strong>
      @if (_defaultAddr is null)
      {
        <em>
          No default address.
          <NavLink class="link-secondary" href="addresses">Add one</NavLink>.
        </em>
      }
      else
      {
        @_defaultAddr.Street
      }
      <div class="text-muted">Delivery price: @DeliveryHelper.GetPrice(DeliveryType.Courier).ToString("C")</div>
    </p>
  }
  else if (_isDelivery == false)
  {
    <p>
      <strong>You selected pickup.</strong> Visit our restaurant to get your food.
    </p>
  }

  <div class="d-flex justify-content-between align-items-center">
    <h4>Total: @(_displayTotal.ToString("C"))</h4>
    <button class="btn btn-primary" @onclick="PlaceOrder">
      Place Order
    </button>
  </div>
}

@code {
  private List<OrderItem> _items = new();
  private List<Dish> _dishes = new();
  private Address? _defaultAddr;
  private decimal _total;
  private bool _loaded;
  private DeliveryMethod _deliveryMethod = DeliveryMethod.Delivery;
  private bool _isDelivery = false;
  private decimal _displayTotal => _total + (_isDelivery ? DeliveryHelper.GetPrice(DeliveryType.Courier) : 0);

  private Dictionary<string, object> GetValueAttr(DeliveryMethod method)
  {
    return new Dictionary<string, object> { { "value", method.ToString() } };
  }

  protected override async Task OnInitializedAsync()
  {
    _dishes = await DishService.GetAllAsync();

    var auth = await AuthStateProvider.GetAuthenticationStateAsync();
    var uid = auth.User.Identity?.Name!;
    var allAddrs = await AddressService.GetForUserAsync(uid);
    _defaultAddr = allAddrs.FirstOrDefault(a => a.IsDefault);

    await LoadCartAsync();
  }

  private async Task LoadCartAsync()
  {
    _items = await OrderService.GetCartItemsAsync();
    var baseTotal = await OrderService.GetCartTotalAsync();
    var deliveryFee = _isDelivery ? DeliveryHelper.GetPrice(DeliveryType.Courier) : 0;
    _total = baseTotal + deliveryFee;
    _loaded = true;
    StateHasChanged();
  }

  private string GetImageUrl(Guid dishId)
  {
    var dish = _dishes.FirstOrDefault(d => d.Id == dishId);
    return dish?.ImageUrl ?? "https://via.placeholder.com/60";
  }

  private async Task ChangeQuantity(Guid dishId, int delta)
  {
    if (delta > 0)
      await OrderService.AddToCartAsync(
        _dishes.First(d => d.Id == dishId)
      );
    else
      await OrderService.RemoveOneFromCartAsync(dishId);

    await LoadCartAsync();
  }

  private async Task RemoveAll(Guid dishId)
  {
    await OrderService.RemoveFromCartAsync(dishId);
    await LoadCartAsync();
  }

  private async Task PlaceOrder()
  {
    var auth = await AuthStateProvider.GetAuthenticationStateAsync();
    var user = auth.User;
    var userIdStr = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

    if (_isDelivery)
    {
      if (_defaultAddr is null)
        return;

      await OrderService.PlaceOrderAsync(_defaultAddr.Id,  new Guid(userIdStr), _displayTotal);
    }
    else
    {
      await OrderService.PlaceOrderAsync(null,  new Guid(userIdStr), _displayTotal);
    }

    await OrderService.ClearCartAsync();
    Nav.NavigateTo("/orders");
  }
}
