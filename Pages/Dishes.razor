@page "/dishes"
@using System.Globalization
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@inject IDishService DishService
@inject IOrderService OrderService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav
@inject IJSRuntime JS

<h2>Menu</h2>

<div class="row mb-3">
  <div class="col-md-4">
    <InputText class="form-control" placeholder="Search dishes..."
               @bind-Value="_searchTerm" />
  </div>
  <div class="col-md-3">
    <InputNumber class="form-control" placeholder="Min price"
                 @bind-Value="_minPrice" />
  </div>
  <div class="col-md-3">
    <InputNumber class="form-control" placeholder="Max price"
                 @bind-Value="_maxPrice" />
  </div>
  <div class="col-md-2">
    <button class="btn btn-outline-secondary w-100"
            @onclick="ClearFilters">
      Clear
    </button>
  </div>
</div>

<AuthorizeView Roles="Admin">
  <div class="mb-4">
    <button class="btn btn-primary"
            @onclick='() => Nav.NavigateTo("/dishes/new")'>
      Додати страву
    </button>
  </div>
</AuthorizeView>

@if (_dishes == null)
{
  <p><em>Loading…</em></p>
}
else
{
  var list = FilteredDishes.ToList();
  if (!list.Any())
  {
    <p>No dishes match your filters.</p>
  }
  else
  {
    <div class="row">
      @foreach (var dish in list)
      {
        <div class="col-md-4 mb-4">
          <div class="card h-100">
            <img src="@dish.ImageUrl" class="card-img-top" alt="@dish.Name"
                 style="cursor:pointer"
                 @onclick="() => GoToDetails(dish.Id)" />
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">@dish.Name</h5>
              <p class="card-text flex-grow-1">@dish.Description</p>
              <p class="fw-bold">@dish.Price.ToString("C", CultureInfo.CurrentCulture)</p>
              <div class="d-flex justify-content-between flex-wrap gap-2">
                <button class="btn btn-outline-primary"
                        @onclick="() => GoToDetails(dish.Id)">
                  Details
                </button>

                <AuthorizeView Roles="Admin">
                  <button class="btn btn-outline-secondary"
                          @onclick='() => Nav.NavigateTo($"/dishes/edit/{dish.Id}")'>
                    Edit
                  </button>
                  <button class="btn btn-outline-danger"
                          @onclick="() => DeleteDish(dish.Id)">
                    Delete
                  </button>
                </AuthorizeView>

                <button class="btn btn-success"
                        @onclick="() => AddToCart(dish)">
                  Add to cart
                </button>
              </div>
            </div>
          </div>
        </div>
      }
    </div>
  }
}

@code {
  private List<Dish>? _dishes;
  private string _searchTerm = "";
  private decimal? _minPrice;
  private decimal? _maxPrice;

  protected override async Task OnInitializedAsync()
  {
    _dishes = await DishService.GetAllAsync();
  }

  private IEnumerable<Dish> FilteredDishes
  {
    get
    {
      if (_dishes == null)
        return Enumerable.Empty<Dish>();

      try
      {
        return _dishes.Where(d =>
          (string.IsNullOrWhiteSpace(_searchTerm)
           || Regex.IsMatch(d.Name, _searchTerm, RegexOptions.IgnoreCase)
           || Regex.IsMatch(d.Description, _searchTerm, RegexOptions.IgnoreCase))
          && (!_minPrice.HasValue || d.Price >= _minPrice.Value)
          && (!_maxPrice.HasValue || d.Price <= _maxPrice.Value)
        );
      }
      catch (ArgumentException)
      {
        return Enumerable.Empty<Dish>(); // некоректний regex → пустий список
      }
    }
  }

  private void ClearFilters()
  {
    _searchTerm = "";
    _minPrice = null;
    _maxPrice = null;
  }

  private void GoToDetails(Guid id) =>
    Nav.NavigateTo($"/dishes/{id}");

  private async Task AddToCart(Dish dish)
  {
    await OrderService.AddToCartAsync(dish);

    var authState = await AuthProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity?.IsAuthenticated == true)
    {
      await JS.InvokeVoidAsync("alert", $"\"{dish.Name}\" added to cart!");
    }
    else
    {
      var msg = $"\"{dish.Name}\" added to cart!\n\n" +
                "Warning: you are not logged in, so you won’t be able to place an order.";
      await JS.InvokeVoidAsync("alert", msg);
    }
  }

  private async Task DeleteDish(Guid id)
  {
    var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this dish?");
    if (confirm)
    {
      await DishService.DeleteAsync(id);
      _dishes = await DishService.GetAllAsync();
    }
  }
}
