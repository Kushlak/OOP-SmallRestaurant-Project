@page "/orders"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IOrderService               OrderService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager           Nav

<h2>Your Orders</h2>

@if (!_loaded)
{
  <p><em>Loading…</em></p>
}
else if (!_orders.Any())
{
  <div class="alert alert-info">No orders yet.</div>
}
else
{
  <ul class="list-group">
    @foreach (var o in _orders)
    {
      <li class="list-group-item">
        <a href="@($"/orders/{o.Id}")">@o.CreatedAt.ToLocalTime():g</a>
        – Total: @($"{o.Total:C}")
      </li>
    }
  </ul>
}

@code {
  private bool _loaded;
  private List<Order> _orders = new();

  protected override async Task OnInitializedAsync()
  {
    var auth = await AuthStateProvider.GetAuthenticationStateAsync();
    var user = auth.User;

    if (!(user.Identity?.IsAuthenticated ?? false))
    {
      Nav.NavigateTo("/login?redirected=orders", true);
      return;
    }

    var role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
    var userIdStr = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    Console.WriteLine($"[Auth] NameIdentifier: {userIdStr}");

    if (role == "User" && Guid.TryParse(userIdStr, out var userId))
    {
      _orders = await OrderService.GetByUserIdAsync(userId);
    }
    else
    {
      _orders = await OrderService.GetAllAsync();
    }

    _loaded = true;
  }

}